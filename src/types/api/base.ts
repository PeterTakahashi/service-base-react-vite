/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/jwt/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Auth:Jwt.Login */
        post: operations["auth_jwt_login_auth_jwt_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/jwt/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Auth:Jwt.Logout */
        post: operations["auth_jwt_logout_auth_jwt_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/cookie/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Auth:Cookie.Login */
        post: operations["auth_cookie_login_auth_cookie_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/cookie/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Auth:Cookie.Logout */
        post: operations["auth_cookie_logout_auth_cookie_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register:Register */
        post: operations["register_register_auth_register_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset:Forgot Password */
        post: operations["reset_forgot_password_auth_forgot_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset:Reset Password */
        post: operations["reset_reset_password_auth_reset_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/request-verify-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify:Request-Token */
        post: operations["verify_request_token_auth_request_verify_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify:Verify */
        post: operations["verify_verify_auth_verify_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/cookie/google/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Oauth:Google.Cookie Oauth.Authorize */
        get: operations["oauth_google_cookie_oauth_authorize_auth_cookie_google_authorize_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/cookie/google/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Oauth:Google.Cookie Oauth.Callback
         * @description The response varies based on the authentication backend used.
         */
        get: operations["oauth_google_cookie_oauth_callback_auth_cookie_google_callback_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/cookie/github/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Oauth:Github.Cookie Oauth.Authorize */
        get: operations["oauth_github_cookie_oauth_authorize_auth_cookie_github_authorize_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/cookie/github/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Oauth:Github.Cookie Oauth.Callback
         * @description The response varies based on the authentication backend used.
         */
        get: operations["oauth_github_cookie_oauth_callback_auth_cookie_github_callback_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Users:Get Current User */
        get: operations["users_get_current_user_users_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Users:Patch Current User */
        patch: operations["users_patch_current_user_users_me_patch"];
        trace?: never;
    };
    "/payment-intents/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Payment Intents:Update Payment Intent By Webhook */
        post: operations["payment_intents_update_payment_intent_by_webhook_payment_intents_webhook_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/payment-intents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Payment Intents:Create Payment Intent */
        post: operations["payment_intents_create_payment_intent_users_payment_intents_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-wallet-transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * User Wallet Transactions:List User Wallet Transactions
         * @description Retrieve a list of user_wallet transactions with filtering, sorting, and pagination.
         */
        get: operations["user_wallet_transactions_list_user_wallet_transactions_user_wallet_transactions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-wallet-transactions/{user_wallet_transaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** User Wallet Transactions:Get User Wallet Transaction */
        get: operations["user_wallet_transactions_get_user_wallet_transaction_user_wallet_transactions__user_wallet_transaction_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-api-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * User Api Keys:List User Api Keys
         * @description Retrieve a list of user API keys with filtering, sorting, and pagination.
         */
        get: operations["user_api_keys_list_user_api_keys_user_api_keys_get"];
        put?: never;
        /**
         * User Api Keys:Create User Api Key
         * @description Create a new user API key.
         */
        post: operations["user_api_keys_create_user_api_key_user_api_keys_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-api-keys/{user_api_key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * User Api Keys:Get User Api Keys
         * @description Retrieve a user API key by its ID.
         */
        get: operations["user_api_keys_get_user_api_keys_user_api_keys__user_api_key_id__get"];
        put?: never;
        post?: never;
        /**
         * User Api Keys:Delete User Api Key
         * @description Delete a user API key.
         */
        delete: operations["user_api_keys_delete_user_api_key_user_api_keys__user_api_key_id__delete"];
        options?: never;
        head?: never;
        /**
         * User Api Keys:Update User Api Key
         * @description Update an existing user API key.
         */
        patch: operations["user_api_keys_update_user_api_key_user_api_keys__user_api_key_id__patch"];
        trace?: never;
    };
    "/user-api-keys/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User Api Keys:Verify User Api Key */
        post: operations["user_api_keys_verify_user_api_key_user_api_keys_verify_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Organizations:List Organizations
         * @description Retrieve a list of organizations with filtering, sorting, and pagination.
         */
        get: operations["organizations_list_organizations_organizations_get"];
        put?: never;
        /**
         * Organizations:Create Organization
         * @description Create a new organization.
         */
        post: operations["organizations_create_organization_organizations_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Organizations:Get Organization
         * @description Retrieve an organization by its ID.
         */
        get: operations["organizations_get_organization_organizations__organization_id__get"];
        put?: never;
        post?: never;
        /**
         * Organizations:Delete Organization
         * @description Delete an organization.
         */
        delete: operations["organizations_delete_organization_organizations__organization_id__delete"];
        options?: never;
        head?: never;
        /**
         * Organizations:Update Organization
         * @description Update an existing organization.
         */
        patch: operations["organizations_update_organization_organizations__organization_id__patch"];
        trace?: never;
    };
    "/organizations/{organization_id}/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Organizations:Users:Invite */
        post: operations["organizations_users_invite_organizations__organization_id__invite_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/invite/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Organizations:Users:Invite:Accept */
        patch: operations["organizations_users_invite_accept_organizations__organization_id__invite_accept_patch"];
        trace?: never;
    };
    "/organizations/{organization_id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Organizations:Users */
        get: operations["organizations_users_organizations__organization_id__users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Organizations:User */
        get: operations["organizations_user_organizations__organization_id__users__user_id__get"];
        put?: never;
        post?: never;
        /** Organizations:User:Delete */
        delete: operations["organizations_user_delete_organizations__organization_id__users__user_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/wallet-transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Organization Wallet Transactions:List Organization Wallet Transactions
         * @description Retrieve a list of organization_wallet transactions with filtering, sorting, and pagination.
         */
        get: operations["organization_wallet_transactions_list_organization_wallet_transactions_organizations__organization_id__wallet_transactions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/wallet-transactions/{organization_wallet_transaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Organization Wallet Transactions:Get Organization Wallet Transaction */
        get: operations["organization_wallet_transactions_get_organization_wallet_transaction_organizations__organization_id__wallet_transactions__organization_wallet_transaction_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/api-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Organization Api Keys:List Organization Api Keys
         * @description Retrieve a list of organization API keys with filtering, sorting, and pagination.
         */
        get: operations["organization_api_keys_list_organization_api_keys_organizations__organization_id__api_keys_get"];
        put?: never;
        /**
         * Organization Api Keys:Create Organization Api Key
         * @description Create a new organization API key.
         */
        post: operations["organization_api_keys_create_organization_api_key_organizations__organization_id__api_keys_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/api-keys/{organization_api_key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Organization Api Keys:Get Organization Api Keys
         * @description Retrieve a organization API key by its ID.
         */
        get: operations["organization_api_keys_get_organization_api_keys_organizations__organization_id__api_keys__organization_api_key_id__get"];
        put?: never;
        post?: never;
        /**
         * Organization Api Keys:Delete Organization Api Key
         * @description Delete a organization API key.
         */
        delete: operations["organization_api_keys_delete_organization_api_key_organizations__organization_id__api_keys__organization_api_key_id__delete"];
        options?: never;
        head?: never;
        /**
         * Organization Api Keys:Update Organization Api Key
         * @description Update an existing organization API key.
         */
        patch: operations["organization_api_keys_update_organization_api_key_organizations__organization_id__api_keys__organization_api_key_id__patch"];
        trace?: never;
    };
    "/organizations/{organization_id}/payment-intents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Organization::Payment Intents:Create Payment Intent */
        post: operations["organization__payment_intents_create_payment_intent_organizations__organization_id__payment_intents_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AddressRead */
        AddressRead: {
            /**
             * City
             * @description City, district, suburb, town, or village.
             */
            city: string;
            /**
             * Country
             * @description ISO-3166-1 alpha-2 country code.
             */
            country: string;
            /**
             * Line1
             * @description Address line 1 (street, PO Box, company name).
             */
            line1: string;
            /**
             * Line2
             * @description Address line 2 (apartment, suite etc.).
             */
            line2?: string | null;
            /**
             * Postal Code
             * @description ZIP or postal code.
             */
            postal_code: string;
            /**
             * State
             * @description ISO-3166-2 subdivision code (e.g. 'NY' or 'TX', *without* country prefix).
             */
            state: string;
        };
        /** AddressWrite */
        AddressWrite: {
            /**
             * City
             * @description City, district, suburb, town, or village.
             */
            city: string;
            /**
             * Country
             * @description ISO-3166-1 alpha-2 country code.
             */
            country: string;
            /**
             * Line1
             * @description Address line 1 (street, PO Box, company name).
             */
            line1: string;
            /**
             * Line2
             * @description Address line 2 (apartment, suite etc.).
             */
            line2?: string | null;
            /**
             * Postal Code
             * @description ZIP or postal code.
             */
            postal_code: string;
            /**
             * State
             * @description ISO-3166-2 subdivision code (e.g. 'NY' or 'TX', *without* country prefix).
             */
            state: string;
        };
        /** ApiKeyRead */
        ApiKeyRead: {
            /**
             * Id
             * @description The ID of the object
             * @example abcd1234xyzc
             */
            id: string;
            /**
             * Name
             * @description Name of the API key
             * @example My API Key
             */
            name: string;
            /**
             * Api Key
             * @description The actual API key
             * @example 1234567890abcdef
             */
            api_key: string;
            /**
             * Expires At
             * @description Expiration datetime of the API key
             * @example 2024-12-31T23:59:59Z
             */
            expires_at?: string | null;
            /**
             * Allowed Origin
             * @description CORS allowed origin
             * @example https://example.com
             */
            allowed_origin?: string | null;
            /**
             * Allowed Ip
             * @description Allowed IP address
             * @example 192.168.1.1
             */
            allowed_ip?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description Creation datetime of the API key
             * @example 2023-10-01T12:00:00Z
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Last updated datetime of the API key
             * @example 2023-10-01T12:00:00Z
             */
            updated_at: string;
        };
        /** BearerResponse */
        BearerResponse: {
            /** Access Token */
            access_token: string;
            /** Token Type */
            token_type: string;
        };
        /** Body_auth_cookie_login_auth_cookie_login_post */
        Body_auth_cookie_login_auth_cookie_login_post: {
            /** Grant Type */
            grant_type?: string | null;
            /** Username */
            username: string;
            /**
             * Password
             * Format: password
             */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Client Id */
            client_id?: string | null;
            /**
             * Client Secret
             * Format: password
             */
            client_secret?: string | null;
        };
        /** Body_auth_jwt_login_auth_jwt_login_post */
        Body_auth_jwt_login_auth_jwt_login_post: {
            /** Grant Type */
            grant_type?: string | null;
            /** Username */
            username: string;
            /**
             * Password
             * Format: password
             */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Client Id */
            client_id?: string | null;
            /**
             * Client Secret
             * Format: password
             */
            client_secret?: string | null;
        };
        /** Body_reset_forgot_password_auth_forgot_password_post */
        Body_reset_forgot_password_auth_forgot_password_post: {
            /**
             * Email
             * Format: email
             */
            email: string;
        };
        /** Body_reset_reset_password_auth_reset_password_post */
        Body_reset_reset_password_auth_reset_password_post: {
            /** Token */
            token: string;
            /** Password */
            password: string;
        };
        /** Body_verify_request_token_auth_request_verify_token_post */
        Body_verify_request_token_auth_request_verify_token_post: {
            /**
             * Email
             * Format: email
             */
            email: string;
        };
        /** Body_verify_verify_auth_verify_post */
        Body_verify_verify_auth_verify_post: {
            /** Token */
            token: string;
        };
        /** ErrorDetail */
        ErrorDetail: {
            /** Status */
            status: string;
            /** Code */
            code: string;
            /** Title */
            title: string;
            /** Detail */
            detail: string;
            source?: components["schemas"]["ErrorSource"] | null;
        };
        /** ErrorResponse */
        ErrorResponse: {
            /**
             * Type
             * @default about:blank
             */
            type: string;
            /** Title */
            title: string;
            /** Status */
            status: number;
            /** Instance */
            instance: string;
            /** Errors */
            errors: components["schemas"]["ErrorDetail"][];
        };
        /** ErrorSource */
        ErrorSource: {
            /** Pointer */
            pointer?: string | null;
        };
        /** ListResponseMeta */
        ListResponseMeta: {
            /**
             * Limit
             * @description Maximum number of items to retrieve
             * @default 100
             */
            limit: number;
            /**
             * Offset
             * @description Starting position for retrieval
             * @default 0
             */
            offset: number;
            /**
             * Sorted By
             * @description Field name to sort by
             * @default id
             */
            sorted_by: string | null;
            /**
             * Sorted Order
             * @description Sort order: asc or desc
             * @default asc
             */
            sorted_order: string;
            /**
             * Total Count
             * @description Total number of items matching the search criteria.
             * @example 100
             */
            total_count: number;
        };
        /** OAuth2AuthorizeResponse */
        OAuth2AuthorizeResponse: {
            /** Authorization Url */
            authorization_url: string;
        };
        /** OrganizationApiKeyCreate */
        OrganizationApiKeyCreate: {
            /**
             * Name
             * @description Name of the API key
             * @example My API Key
             */
            name: string;
            /**
             * Expires At
             * @description Expiration datetime of the API key
             * @example 2024-12-31T23:59:59Z
             */
            expires_at?: string | null;
            /**
             * Allowed Origin
             * @description CORS allowed origin
             * @example https://example.com
             */
            allowed_origin?: string | null;
            /**
             * Allowed Ip
             * @description Allowed IP address
             * @example 192.168.1.1
             */
            allowed_ip?: string | null;
        };
        /** OrganizationApiKeyListRead */
        OrganizationApiKeyListRead: {
            meta: components["schemas"]["ListResponseMeta"];
            /** Data */
            data: components["schemas"]["ApiKeyRead"][];
        };
        /** OrganizationApiKeyRead */
        OrganizationApiKeyRead: {
            /**
             * Id
             * @description The ID of the object
             * @example abcd1234xyzc
             */
            id: string;
            /**
             * Name
             * @description Name of the API key
             * @example My API Key
             */
            name: string;
            /**
             * Api Key
             * @description The actual API key
             * @example 1234567890abcdef
             */
            api_key: string;
            /**
             * Expires At
             * @description Expiration datetime of the API key
             * @example 2024-12-31T23:59:59Z
             */
            expires_at?: string | null;
            /**
             * Allowed Origin
             * @description CORS allowed origin
             * @example https://example.com
             */
            allowed_origin?: string | null;
            /**
             * Allowed Ip
             * @description Allowed IP address
             * @example 192.168.1.1
             */
            allowed_ip?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description Creation datetime of the API key
             * @example 2023-10-01T12:00:00Z
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Last updated datetime of the API key
             * @example 2023-10-01T12:00:00Z
             */
            updated_at: string;
            /** @description User who created the organization API key. */
            created_by_user: components["schemas"]["UserRead"];
        };
        /** OrganizationApiKeyUpdate */
        OrganizationApiKeyUpdate: {
            /**
             * Name
             * @description Name of the API key
             * @example My API Key
             */
            name: string;
            /**
             * Expires At
             * @description Expiration datetime of the API key
             * @example 2024-12-31T23:59:59Z
             */
            expires_at?: string | null;
            /**
             * Allowed Origin
             * @description CORS allowed origin
             * @example https://example.com
             */
            allowed_origin?: string | null;
            /**
             * Allowed Ip
             * @description Allowed IP address
             * @example 192.168.1.1
             */
            allowed_ip?: string | null;
        };
        /** OrganizationCreate */
        OrganizationCreate: {
            /**
             * Name
             * @description Organization name.
             * @example Acme Inc.
             */
            name: string;
            /**
             * Description
             * @description Organization description.
             * @example A leading provider of innovative solutions.
             */
            description?: string | null;
            /**
             * Profile Image Key
             * @description Key (e.g. S3/MinIO object key) of the profile image.
             * @example org/1/profile.png
             */
            profile_image_key?: string | null;
            /**
             * Billing Email
             * @description Billing contact e-mail address.
             * @example billing@acme.com
             */
            billing_email?: string | null;
            /**
             * @description Registered address of the organization.
             * @example {
             *       "city": "Metropolis",
             *       "country": "US",
             *       "line1": "123 Main St",
             *       "line2": "Suite 100",
             *       "postal_code": "12345",
             *       "state": "NY"
             *     }
             */
            address: components["schemas"]["AddressWrite"];
            /**
             * Tax Type
             * @description Tax type (e.g., eu_vat) for the organization. ref: https://docs.stripe.com/api/tax_ids/object
             * @example VAT
             */
            tax_type?: string | null;
            /**
             * Tax Id
             * @description Tax ID (e.g., VAT number).
             * @example VAT123456789
             */
            tax_id?: string | null;
        };
        /** OrganizationListRead */
        OrganizationListRead: {
            meta: components["schemas"]["ListResponseMeta"];
            /** Data */
            data: components["schemas"]["OrganizationRead"][];
        };
        /** OrganizationRead */
        OrganizationRead: {
            /**
             * Id
             * @description The ID of the object
             * @example abcd1234xyzc
             */
            id: string;
            /**
             * Name
             * @description Organization name.
             */
            name: string;
            /**
             * Description
             * @description Organization description.
             */
            description?: string | null;
            /**
             * Profile Image Key
             * @description Profile image object key.
             */
            profile_image_key?: string | null;
            /**
             * Billing Email
             * @description Billing contact e-mail.
             */
            billing_email?: string | null;
            /**
             * Tax Type
             * @description Tax type (e.g., eu_vat) for the organization. ref: https://docs.stripe.com/api/tax_ids/object
             */
            tax_type?: string | null;
            /**
             * Tax Id
             * @description Tax ID (e.g., VAT number).
             */
            tax_id?: string | null;
            /** @description User who created the organization. */
            created_by_user: components["schemas"]["UserRead"];
            /** @description Registered address of the organization. */
            address?: components["schemas"]["AddressRead"] | null;
            /**
             * Created At
             * Format: date-time
             * @description Record creation timestamp.
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Record update timestamp.
             */
            updated_at: string;
        };
        /** OrganizationUpdate */
        OrganizationUpdate: {
            /**
             * Name
             * @description Organization name.
             * @example Acme Inc.
             */
            name: string;
            /**
             * Description
             * @description Organization description.
             * @example A leading provider of innovative solutions.
             */
            description?: string | null;
            /**
             * Profile Image Key
             * @description Key (e.g. S3/MinIO object key) of the profile image.
             * @example org/1/profile.png
             */
            profile_image_key?: string | null;
            /**
             * Billing Email
             * @description Billing contact e-mail address.
             * @example billing@acme.com
             */
            billing_email?: string | null;
            /**
             * @description Registered address of the organization.
             * @example {
             *       "city": "Metropolis",
             *       "country": "US",
             *       "line1": "123 Main St",
             *       "line2": "Suite 100",
             *       "postal_code": "12345",
             *       "state": "NY"
             *     }
             */
            address: components["schemas"]["AddressWrite"];
            /**
             * Tax Type
             * @description Tax type (e.g., eu_vat) for the organization. ref: https://docs.stripe.com/api/tax_ids/object
             * @example VAT
             */
            tax_type?: string | null;
            /**
             * Tax Id
             * @description Tax ID (e.g., VAT number).
             * @example VAT123456789
             */
            tax_id?: string | null;
        };
        /** OrganizationUserInvite */
        OrganizationUserInvite: {
            /**
             * Email
             * Format: email
             * @description The email address of the user to invite.
             * @example user@example.com
             */
            email: string;
        };
        /** OrganizationWalletTransactionListRead */
        OrganizationWalletTransactionListRead: {
            meta: components["schemas"]["ListResponseMeta"];
            /** Data */
            data: components["schemas"]["WalletTransactionRead"][];
        };
        /** OrganizationWalletTransactionRead */
        OrganizationWalletTransactionRead: {
            /**
             * Id
             * @description The ID of the object
             * @example abcd1234xyzc
             */
            id: string;
            /**
             * Amount
             * @description The amount of the transaction in USD
             * @example 10.00
             */
            amount: string;
            /**
             * Balance After Transaction
             * @description The balance after the transaction in USD
             * @example 100.00
             */
            balance_after_transaction?: string | null;
            /**
             * @description The type of the user_wallet transaction (e.g., 'deposit', 'spend').
             * @example deposit
             */
            wallet_transaction_type: components["schemas"]["WalletTransactionType"];
            /**
             * @description The status of the user_wallet transaction (e.g., 'pending', 'completed').
             * @example completed
             */
            wallet_transaction_status: components["schemas"]["WalletTransactionStatus"];
            /**
             * Created At
             * Format: date-time
             * @description The date and time when the transaction was created.
             * @example 2023-10-01T12:00:00Z
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description The date and time when the transaction was last updated.
             * @example 2023-10-01T12:00:00Z
             */
            updated_at: string;
        };
        /** PaymentIntentCreate */
        PaymentIntentCreate: {
            /**
             * Amount
             * @description The amount to be charged in the smallest currency unit (USD).
             * @example 1000
             */
            amount: number;
        };
        /** PaymentIntentCreateResponse */
        PaymentIntentCreateResponse: {
            /**
             * Id
             * @description The unique identifier for the payment intent.
             * @example pi_1F8Y2e2eZvKYlo2C0d3f4g5h6
             */
            id: string;
            /**
             * Amount
             * @description The amount to be charged in the smallest currency unit (e.g., cents for USD).
             * @example 10
             */
            amount: string;
            /**
             * Amount Inclusive Tax
             * @description The amount to be charged inclusive of tax in the smallest currency unit.
             * @example 11
             */
            amount_inclusive_tax: string;
            /**
             * Currency
             * @description The currency in which the payment intent is created.
             * @example usd
             */
            currency: string;
            /**
             * Client Secret
             * @description The client secret used to confirm the payment intent on the client side.
             * @example pi_1F8Y2e2eZvKYlo2C0d3f4g5h6_secret_1234567890
             */
            client_secret: string;
            /**
             * Status
             * @description The current status of the payment intent.
             * @example requires_confirmation
             */
            status: string;
        };
        /** UserApiKeyCreate */
        UserApiKeyCreate: {
            /**
             * Name
             * @description Name of the API key
             * @example My API Key
             */
            name: string;
            /**
             * Expires At
             * @description Expiration datetime of the API key
             * @example 2024-12-31T23:59:59Z
             */
            expires_at?: string | null;
            /**
             * Allowed Origin
             * @description CORS allowed origin
             * @example https://example.com
             */
            allowed_origin?: string | null;
            /**
             * Allowed Ip
             * @description Allowed IP address
             * @example 192.168.1.1
             */
            allowed_ip?: string | null;
        };
        /** UserApiKeyListRead */
        UserApiKeyListRead: {
            meta: components["schemas"]["ListResponseMeta"];
            /** Data */
            data: components["schemas"]["ApiKeyRead"][];
        };
        /** UserApiKeyRead */
        UserApiKeyRead: {
            /**
             * Id
             * @description The ID of the object
             * @example abcd1234xyzc
             */
            id: string;
            /**
             * Name
             * @description Name of the API key
             * @example My API Key
             */
            name: string;
            /**
             * Api Key
             * @description The actual API key
             * @example 1234567890abcdef
             */
            api_key: string;
            /**
             * Expires At
             * @description Expiration datetime of the API key
             * @example 2024-12-31T23:59:59Z
             */
            expires_at?: string | null;
            /**
             * Allowed Origin
             * @description CORS allowed origin
             * @example https://example.com
             */
            allowed_origin?: string | null;
            /**
             * Allowed Ip
             * @description Allowed IP address
             * @example 192.168.1.1
             */
            allowed_ip?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description Creation datetime of the API key
             * @example 2023-10-01T12:00:00Z
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Last updated datetime of the API key
             * @example 2023-10-01T12:00:00Z
             */
            updated_at: string;
        };
        /** UserApiKeyUpdate */
        UserApiKeyUpdate: {
            /**
             * Name
             * @description Name of the API key
             * @example My API Key
             */
            name: string;
            /**
             * Expires At
             * @description Expiration datetime of the API key
             * @example 2024-12-31T23:59:59Z
             */
            expires_at?: string | null;
            /**
             * Allowed Origin
             * @description CORS allowed origin
             * @example https://example.com
             */
            allowed_origin?: string | null;
            /**
             * Allowed Ip
             * @description Allowed IP address
             * @example 192.168.1.1
             */
            allowed_ip?: string | null;
        };
        /** UserApiKeyVerifyResponse */
        UserApiKeyVerifyResponse: {
            /**
             * Is Valid
             * @description Indicates whether the API key is valid
             * @example true
             */
            is_valid: boolean;
        };
        /** UserCreate */
        UserCreate: {
            /**
             * Email
             * Format: email
             * @description The email of the user.
             * @example user@example.com
             */
            email: string;
            /**
             * Password
             * @description The password of the user.
             * @example password123%
             */
            password: string;
        };
        /** UserListRead */
        UserListRead: {
            meta: components["schemas"]["ListResponseMeta"];
            /** Data */
            data: components["schemas"]["UserRead"][];
        };
        /** UserRead */
        UserRead: {
            /** Id */
            id: unknown;
            /**
             * Email
             * Format: email
             */
            email: string;
            /**
             * Is Verified
             * @default false
             */
            is_verified: boolean;
        };
        /** UserUpdate */
        UserUpdate: {
            /**
             * Email
             * @description The email of the user.
             * @example user@example.com
             */
            email?: string | null;
            /**
             * Password
             * @description The password of the user.
             * @example password123%
             */
            password?: string | null;
            /**
             * @description Registered address of the user.
             * @example {
             *       "city": "Metropolis",
             *       "country": "US",
             *       "line1": "123 Main St",
             *       "line2": "Suite 100",
             *       "postal_code": "12345",
             *       "state": "NY"
             *     }
             */
            address?: components["schemas"]["AddressWrite"] | null;
        };
        /** UserWalletRead */
        UserWalletRead: {
            /**
             * Balance
             * @description The current balance of the user_wallet.
             * @example 10.00
             */
            balance: string;
            /**
             * Created At
             * Format: date-time
             * @description The date and time when the user_wallet was created.
             * @example 2023-10-01T12:00:00Z
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description The date and time when the user_wallet was last updated.
             * @example 2023-10-01T12:00:00Z
             */
            updated_at: string;
        };
        /** UserWalletTransactionListRead */
        UserWalletTransactionListRead: {
            meta: components["schemas"]["ListResponseMeta"];
            /** Data */
            data: components["schemas"]["WalletTransactionRead"][];
        };
        /** UserWalletTransactionRead */
        UserWalletTransactionRead: {
            /**
             * Id
             * @description The ID of the object
             * @example abcd1234xyzc
             */
            id: string;
            /**
             * Amount
             * @description The amount of the transaction in USD
             * @example 10.00
             */
            amount: string;
            /**
             * Balance After Transaction
             * @description The balance after the transaction in USD
             * @example 100.00
             */
            balance_after_transaction?: string | null;
            /**
             * @description The type of the user_wallet transaction (e.g., 'deposit', 'spend').
             * @example deposit
             */
            wallet_transaction_type: components["schemas"]["WalletTransactionType"];
            /**
             * @description The status of the user_wallet transaction (e.g., 'pending', 'completed').
             * @example completed
             */
            wallet_transaction_status: components["schemas"]["WalletTransactionStatus"];
            /**
             * Created At
             * Format: date-time
             * @description The date and time when the transaction was created.
             * @example 2023-10-01T12:00:00Z
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description The date and time when the transaction was last updated.
             * @example 2023-10-01T12:00:00Z
             */
            updated_at: string;
        };
        /** UserWithRelationRead */
        UserWithRelationRead: {
            /** Id */
            id: unknown;
            /**
             * Email
             * Format: email
             */
            email: string;
            /**
             * Is Verified
             * @default false
             */
            is_verified: boolean;
            /** @description The user_wallet associated with the user. */
            user_wallet: components["schemas"]["UserWalletRead"];
            /** @description Address associated with the user. */
            address?: components["schemas"]["AddressRead"] | null;
        };
        /**
         * WalletTransactionRead
         * @description Schema for reading user_wallet transaction information.
         */
        WalletTransactionRead: {
            /**
             * Id
             * @description The ID of the object
             * @example abcd1234xyzc
             */
            id: string;
            /**
             * Amount
             * @description The amount of the transaction in USD
             * @example 10.00
             */
            amount: string;
            /**
             * Balance After Transaction
             * @description The balance after the transaction in USD
             * @example 100.00
             */
            balance_after_transaction?: string | null;
            /**
             * @description The type of the user_wallet transaction (e.g., 'deposit', 'spend').
             * @example deposit
             */
            wallet_transaction_type: components["schemas"]["WalletTransactionType"];
            /**
             * @description The status of the user_wallet transaction (e.g., 'pending', 'completed').
             * @example completed
             */
            wallet_transaction_status: components["schemas"]["WalletTransactionStatus"];
            /**
             * Created At
             * Format: date-time
             * @description The date and time when the transaction was created.
             * @example 2023-10-01T12:00:00Z
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description The date and time when the transaction was last updated.
             * @example 2023-10-01T12:00:00Z
             */
            updated_at: string;
        };
        /**
         * WalletTransactionStatus
         * @enum {string}
         */
        WalletTransactionStatus: "pending" | "completed" | "failed";
        /**
         * WalletTransactionType
         * @enum {string}
         */
        WalletTransactionType: "deposit" | "spend";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    auth_jwt_login_auth_jwt_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_auth_jwt_login_auth_jwt_login_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI",
                     *       "token_type": "bearer"
                     *     } */
                    "application/json": components["schemas"]["BearerResponse"];
                };
            };
            /** @description Missing token or inactive user. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    auth_jwt_logout_auth_jwt_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Missing token or inactive user. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    auth_cookie_login_auth_cookie_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_auth_cookie_login_auth_cookie_login_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing token or inactive user. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    auth_cookie_logout_auth_cookie_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing token or inactive user. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    register_register_auth_register_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    reset_forgot_password_auth_forgot_password_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_reset_forgot_password_auth_forgot_password_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    reset_reset_password_auth_reset_password_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_reset_reset_password_auth_reset_password_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Bad token. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    verify_request_token_auth_request_verify_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_verify_request_token_auth_request_verify_token_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    verify_verify_auth_verify_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_verify_verify_auth_verify_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Bad token. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    oauth_google_cookie_oauth_authorize_auth_cookie_google_authorize_get: {
        parameters: {
            query?: {
                scopes?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuth2AuthorizeResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    oauth_google_cookie_oauth_callback_auth_cookie_google_callback_get: {
        parameters: {
            query?: {
                code?: string | null;
                code_verifier?: string | null;
                state?: string | null;
                error?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Invalid state token or missing email. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Missing token or inactive user. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description User already exists. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    oauth_github_cookie_oauth_authorize_auth_cookie_github_authorize_get: {
        parameters: {
            query?: {
                scopes?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuth2AuthorizeResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    oauth_github_cookie_oauth_callback_auth_cookie_github_callback_get: {
        parameters: {
            query?: {
                code?: string | null;
                code_verifier?: string | null;
                state?: string | null;
                error?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Invalid state token or missing email. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Missing token or inactive user. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description User already exists. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    users_get_current_user_users_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithRelationRead"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    users_patch_current_user_users_me_patch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithRelationRead"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    payment_intents_update_payment_intent_by_webhook_payment_intents_webhook_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Invalid payload or signature. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    payment_intents_create_payment_intent_users_payment_intents_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentIntentCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentIntentCreateResponse"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    user_wallet_transactions_list_user_wallet_transactions_user_wallet_transactions_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                sorted_by?: string;
                sorted_order?: string;
                amount__gte?: number | null;
                amount__lte?: number | null;
                balance_after_transaction__gte?: number | null;
                balance_after_transaction__lte?: number | null;
                wallet_transaction_type__in?: components["schemas"]["WalletTransactionType"][] | null;
                wallet_transaction_status__in?: components["schemas"]["WalletTransactionStatus"][] | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
                updated_at__gte?: string | null;
                updated_at__lte?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWalletTransactionListRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    user_wallet_transactions_get_user_wallet_transaction_user_wallet_transactions__user_wallet_transaction_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_wallet_transaction_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWalletTransactionRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    user_api_keys_list_user_api_keys_user_api_keys_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                sorted_by?: string | null;
                sorted_order?: string;
                name__icontains?: string | null;
                api_key__icontains?: string | null;
                expires_at__gte?: string | null;
                expires_at__lte?: string | null;
                allowed_origin__icontains?: string | null;
                allowed_ip__icontains?: string | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
                updated_at__gte?: string | null;
                updated_at__lte?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserApiKeyListRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    user_api_keys_create_user_api_key_user_api_keys_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserApiKeyCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserApiKeyRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    user_api_keys_get_user_api_keys_user_api_keys__user_api_key_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_api_key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserApiKeyRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    user_api_keys_delete_user_api_key_user_api_keys__user_api_key_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_api_key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    user_api_keys_update_user_api_key_user_api_keys__user_api_key_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_api_key_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserApiKeyUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserApiKeyRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    user_api_keys_verify_user_api_key_user_api_keys_verify_post: {
        parameters: {
            query?: never;
            header?: {
                "X-API-KEY"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserApiKeyVerifyResponse"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organizations_list_organizations_organizations_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                sorted_by?: string | null;
                sorted_order?: string;
                name__icontains?: string | null;
                description__icontains?: string | null;
                billing_email__icontains?: string | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
                updated_at__gte?: string | null;
                updated_at__lte?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationListRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organizations_create_organization_organizations_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organizations_get_organization_organizations__organization_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organizations_delete_organization_organizations__organization_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organizations_update_organization_organizations__organization_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organizations_users_invite_organizations__organization_id__invite_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUserInvite"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organizations_users_invite_accept_organizations__organization_id__invite_accept_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organizations_users_organizations__organization_id__users_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                sorted_by?: string | null;
                sorted_order?: string;
                email__icontains?: string | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
                updated_at__gte?: string | null;
                updated_at__lte?: string | null;
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserListRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organizations_user_organizations__organization_id__users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organizations_user_delete_organizations__organization_id__users__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organization_wallet_transactions_list_organization_wallet_transactions_organizations__organization_id__wallet_transactions_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                sorted_by?: string;
                sorted_order?: string;
                amount__gte?: number | null;
                amount__lte?: number | null;
                balance_after_transaction__gte?: number | null;
                balance_after_transaction__lte?: number | null;
                wallet_transaction_type__in?: components["schemas"]["WalletTransactionType"][] | null;
                wallet_transaction_status__in?: components["schemas"]["WalletTransactionStatus"][] | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
                updated_at__gte?: string | null;
                updated_at__lte?: string | null;
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationWalletTransactionListRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organization_wallet_transactions_get_organization_wallet_transaction_organizations__organization_id__wallet_transactions__organization_wallet_transaction_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_wallet_transaction_id: string;
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationWalletTransactionRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organization_api_keys_list_organization_api_keys_organizations__organization_id__api_keys_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                sorted_by?: string | null;
                sorted_order?: string;
                name__icontains?: string | null;
                api_key__icontains?: string | null;
                expires_at__gte?: string | null;
                expires_at__lte?: string | null;
                allowed_origin__icontains?: string | null;
                allowed_ip__icontains?: string | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
                updated_at__gte?: string | null;
                updated_at__lte?: string | null;
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationApiKeyListRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organization_api_keys_create_organization_api_key_organizations__organization_id__api_keys_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationApiKeyCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationApiKeyRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organization_api_keys_get_organization_api_keys_organizations__organization_id__api_keys__organization_api_key_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_api_key_id: string;
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationApiKeyRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organization_api_keys_delete_organization_api_key_organizations__organization_id__api_keys__organization_api_key_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_api_key_id: string;
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organization_api_keys_update_organization_api_key_organizations__organization_id__api_keys__organization_api_key_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_api_key_id: string;
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationApiKeyUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationApiKeyRead"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    organization__payment_intents_create_payment_intent_organizations__organization_id__payment_intents_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentIntentCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentIntentCreateResponse"];
                };
            };
            /** @description Unauthorized access. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
